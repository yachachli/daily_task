# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.29.0
#   sqlc-gen-better-python v0.4.3
from __future__ import annotations

__all__: collections.abc.Sequence[str] = (
    "CopyAnalysisParams",
    "QueryResults",
    "all_players",
    "all_teams",
    "copy_analysis",
)

import typing

import msgspec

if typing.TYPE_CHECKING:
    import collections.abc
    import datetime

    import asyncpg
    import asyncpg.cursor

    QueryResultsArgsType: typing.TypeAlias = (
        int
        | float
        | str
        | memoryview
        | datetime.date
        | datetime.time
        | datetime.datetime
        | datetime.timedelta
        | None
    )

    ConnectionLike: typing.TypeAlias = (
        asyncpg.Connection[asyncpg.Record]
        | asyncpg.pool.PoolConnectionProxy[asyncpg.Record]
    )

from daily_bets.db import models


class CopyAnalysisParams(msgspec.Struct):
    analysis: str
    price: float | None
    game_time: datetime.datetime | None
    game_tag: str | None


ALL_PLAYERS: typing.Final[str] = """-- name: AllPlayers :many
SELECT id, player_id, long_name, team_abv, pos, height, weight, bat, throw, b_day, mlb_headshot, espn_headshot, espn_status, injury_description, injury_return FROM mlb_players
"""

ALL_TEAMS: typing.Final[str] = """-- name: AllTeams :many
SELECT team_abv, team_city, team_name, conference, division, rs, ra, wins, losses, run_diff FROM mlb_teams
"""

COPY_ANALYSIS: typing.Final[str] = """-- name: CopyAnalysis :copyfrom
INSERT INTO v2_mlb_daily_bets (analysis, price, game_time, game_tag) VALUES ($1, $2, $3, $4)
"""


T = typing.TypeVar("T")


class QueryResults(typing.Generic[T]):
    __slots__ = ("_args", "_conn", "_cursor", "_decode_hook", "_iterator", "_sql")

    def __init__(
        self,
        conn: ConnectionLike,
        sql: str,
        decode_hook: collections.abc.Callable[[asyncpg.Record], T],
        *args: QueryResultsArgsType,
    ) -> None:
        self._conn = conn
        self._sql = sql
        self._decode_hook = decode_hook
        self._args = args
        self._cursor: asyncpg.cursor.CursorFactory[asyncpg.Record] | None = None
        self._iterator: asyncpg.cursor.CursorIterator[asyncpg.Record] | None = None

    def __aiter__(self) -> QueryResults[T]:
        return self

    def __await__(
        self,
    ) -> collections.abc.Generator[None, None, collections.abc.Sequence[T]]:
        async def _wrapper() -> collections.abc.Sequence[T]:
            result = await self._conn.fetch(self._sql, *self._args)
            return [self._decode_hook(row) for row in result]

        return _wrapper().__await__()

    async def __anext__(self) -> T:
        if self._cursor is None or self._iterator is None:
            self._cursor = self._conn.cursor(self._sql, *self._args)
            self._iterator = self._cursor.__aiter__()
        try:
            record = await self._iterator.__anext__()
        except StopAsyncIteration:
            self._cursor = None
            self._iterator = None
            raise
        return self._decode_hook(record)


def all_players(conn: ConnectionLike) -> QueryResults[models.MlbPlayer]:
    def _decode_hook(row: asyncpg.Record) -> models.MlbPlayer:
        return models.MlbPlayer(
            id=row[0],
            player_id=row[1],
            long_name=row[2],
            team_abv=row[3],
            pos=row[4],
            height=row[5],
            weight=row[6],
            bat=row[7],
            throw=row[8],
            b_day=row[9],
            mlb_headshot=row[10],
            espn_headshot=row[11],
            espn_status=row[12],
            injury_description=row[13],
            injury_return=row[14],
        )

    return QueryResults[models.MlbPlayer](conn, ALL_PLAYERS, _decode_hook)


def all_teams(conn: ConnectionLike) -> QueryResults[models.MlbTeam]:
    def _decode_hook(row: asyncpg.Record) -> models.MlbTeam:
        return models.MlbTeam(
            team_abv=row[0],
            team_city=row[1],
            team_name=row[2],
            conference=row[3],
            division=row[4],
            rs=row[5],
            ra=row[6],
            wins=row[7],
            losses=row[8],
            run_diff=row[9],
        )

    return QueryResults[models.MlbTeam](conn, ALL_TEAMS, _decode_hook)


async def copy_analysis(
    conn: ConnectionLike, *, params: collections.abc.Sequence[CopyAnalysisParams]
) -> int:
    records = [
        (param.analysis, param.price, param.game_time, param.game_tag)
        for param in params
    ]
    result = await conn.copy_records_to_table(
        "v2_mlb_daily_bets",
        records=records,
        columns=["analysis", "price", "game_time", "game_tag"],
    )
    return int(result.split()[-1]) if result.split()[-1].isdigit() else 0
