# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.29.0
#   sqlc-gen-better-python v0.4.4
from __future__ import annotations

__all__: collections.abc.Sequence[str] = (
    "NbaCopyAnalysisParams",
    "NbaPlayersWithTeamRow",
    "QueryResults",
    "nba_copy_analysis",
    "nba_players_with_team",
    "nba_teams",
)

import msgspec
import operator
import typing

if typing.TYPE_CHECKING:
    import asyncpg
    import asyncpg.cursor
    import collections.abc
    import datetime

    QueryResultsArgsType: typing.TypeAlias = int | float | str | memoryview | datetime.date | datetime.time | datetime.datetime | datetime.timedelta | None

    ConnectionLike: typing.TypeAlias = asyncpg.Connection[asyncpg.Record] | asyncpg.pool.PoolConnectionProxy[asyncpg.Record]

from daily_bets.db import models


class NbaCopyAnalysisParams(msgspec.Struct):
    analysis: str
    price: float | None
    game_time: datetime.datetime | None
    game_tag: str | None


class NbaPlayersWithTeamRow(msgspec.Struct):
    id: int
    name: str
    position: str | None
    team_id: int
    player_pic: str | None
    player_id: int
    injury: str | None
    team_abv: str


NBA_COPY_ANALYSIS: typing.Final[str] = """-- name: NbaCopyAnalysis :copyfrom
INSERT INTO v2_nba_daily_bets (analysis, price, game_time, game_tag) VALUES ($1, $2, $3, $4)
"""

NBA_PLAYERS_WITH_TEAM: typing.Final[str] = """-- name: NbaPlayersWithTeam :many
SELECT p.id, p.name, p.position, p.team_id, p.player_pic, p.player_id, p.injury, T.team_abv FROM nba_players P
INNER JOIN nba_teams T ON P.team_id = T.id
"""

NBA_TEAMS: typing.Final[str] = """-- name: NbaTeams :many
SELECT id, name, team_city, team_abv, conference, ppg, oppg, wins, loss, division, team_bpg, team_spg, team_apg, team_fga, team_fgm, team_fta, team_tov, pace, def_rtg FROM nba_teams
"""


T = typing.TypeVar("T")


class QueryResults(typing.Generic[T]):
    __slots__ = ("_args", "_conn", "_cursor", "_decode_hook", "_iterator", "_sql")

    def __init__(
        self,
        conn: ConnectionLike,
        sql: str,
        decode_hook: collections.abc.Callable[[asyncpg.Record], T],
        *args: QueryResultsArgsType,
    ) -> None:
        self._conn = conn
        self._sql = sql
        self._decode_hook = decode_hook
        self._args = args
        self._cursor: asyncpg.cursor.CursorFactory[asyncpg.Record] | None = None
        self._iterator: asyncpg.cursor.CursorIterator[asyncpg.Record] | None = None

    def __aiter__(self) -> QueryResults[T]:
        return self

    def __await__(
        self,
    ) -> collections.abc.Generator[None, None, collections.abc.Sequence[T]]:
        async def _wrapper() -> collections.abc.Sequence[T]:
            result = await self._conn.fetch(self._sql, *self._args)
            return [self._decode_hook(row) for row in result]
        return _wrapper().__await__()

    async def __anext__(self) -> T:
        if self._cursor is None or self._iterator is None:
            self._cursor = self._conn.cursor(self._sql, *self._args)
            self._iterator = self._cursor.__aiter__()
        try:
            record = await self._iterator.__anext__()
        except StopAsyncIteration:
            self._cursor = None
            self._iterator = None
            raise
        return self._decode_hook(record)


async def nba_copy_analysis(conn: ConnectionLike, *, params: collections.abc.Sequence[NbaCopyAnalysisParams]) -> int:
    records = [
        (param.analysis, param.price, param.game_time, param.game_tag)
        for param in params
    ]
    r = await conn.copy_records_to_table("v2_nba_daily_bets", columns=["analysis", "price", "game_time", "game_tag"], records=records)
    return int(n) if (p := r.split()) and (n := p[-1]).isdigit() else 0


def nba_players_with_team(conn: ConnectionLike) -> QueryResults[NbaPlayersWithTeamRow]:
    def _decode_hook(row: asyncpg.Record) -> NbaPlayersWithTeamRow:
        return NbaPlayersWithTeamRow(id=row[0], name=row[1], position=row[2], team_id=row[3], player_pic=row[4], player_id=row[5], injury=row[6], team_abv=row[7])
    return QueryResults[NbaPlayersWithTeamRow](conn, NBA_PLAYERS_WITH_TEAM, _decode_hook)


def nba_teams(conn: ConnectionLike) -> QueryResults[models.NbaTeam]:
    def _decode_hook(row: asyncpg.Record) -> models.NbaTeam:
        return models.NbaTeam(id=row[0], name=row[1], team_city=row[2], team_abv=row[3], conference=row[4], ppg=row[5], oppg=row[6], wins=row[7], loss=row[8], division=row[9], team_bpg=row[10], team_spg=row[11], team_apg=row[12], team_fga=row[13], team_fgm=row[14], team_fta=row[15], team_tov=row[16], pace=row[17], def_rtg=row[18])
    return QueryResults[models.NbaTeam](conn, NBA_TEAMS, _decode_hook)
