# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.29.0
#   sqlc-gen-better-python v0.4.4
from __future__ import annotations

__all__: collections.abc.Sequence[str] = (
    "NflCopyAnalysisParams",
    "NflPlayersWithTeamRow",
    "QueryResults",
    "nfl_copy_analysis",
    "nfl_players_with_team",
    "nfl_teams",
)

import typing

import msgspec

if typing.TYPE_CHECKING:
    import collections.abc
    import datetime

    import asyncpg
    import asyncpg.cursor

    QueryResultsArgsType: typing.TypeAlias = (
        int
        | float
        | str
        | memoryview
        | datetime.date
        | datetime.time
        | datetime.datetime
        | datetime.timedelta
        | None
    )

    ConnectionLike: typing.TypeAlias = (
        asyncpg.Connection[asyncpg.Record]
        | asyncpg.pool.PoolConnectionProxy[asyncpg.Record]
    )

from daily_bets.db import models


class NflCopyAnalysisParams(msgspec.Struct):
    analysis: str
    price: float | None
    game_time: datetime.datetime | None
    game_tag: str | None


class NflPlayersWithTeamRow(msgspec.Struct):
    id: int
    team_id: int
    name: str
    height: str
    position: str
    injury: str | None
    team_abv: str


NFL_COPY_ANALYSIS: typing.Final[str] = """-- name: NflCopyAnalysis :copyfrom
INSERT INTO v2_nfl_daily_bets (analysis, price, game_time, game_tag) VALUES ($1, $2, $3, $4)
"""

NFL_PLAYERS_WITH_TEAM: typing.Final[str] = """-- name: NflPlayersWithTeam :many
SELECT p.id, p.team_id, p.name, p.height, p.position, p.injuries, T.team_code as team_abv FROM v3_nfl_players P
INNER JOIN v3_nfl_teams T ON P.team_id = T.id
"""

NFL_TEAMS: typing.Final[str] = """-- name: NflTeams :many
SELECT id, name, team_code, wins, losses, ties, points_for, points_against, total_tackles, fumbles_lost, defensive_touchdowns, fumbles_recovered, solo_tackles, defensive_interceptions, qb_hits, tackles_for_loss, pass_deflections, sacks, fumbles, passing_td_allowed, passing_yards_allowed, rushing_yards_allowed, rushing_td_allowed FROM v3_nfl_teams
"""


T = typing.TypeVar("T")


class QueryResults(typing.Generic[T]):
    __slots__ = ("_args", "_conn", "_cursor", "_decode_hook", "_iterator", "_sql")

    def __init__(
        self,
        conn: ConnectionLike,
        sql: str,
        decode_hook: collections.abc.Callable[[asyncpg.Record], T],
        *args: QueryResultsArgsType,
    ) -> None:
        self._conn = conn
        self._sql = sql
        self._decode_hook = decode_hook
        self._args = args
        self._cursor: asyncpg.cursor.CursorFactory[asyncpg.Record] | None = None
        self._iterator: asyncpg.cursor.CursorIterator[asyncpg.Record] | None = None

    def __aiter__(self) -> QueryResults[T]:
        return self

    def __await__(
        self,
    ) -> collections.abc.Generator[None, None, collections.abc.Sequence[T]]:
        async def _wrapper() -> collections.abc.Sequence[T]:
            result = await self._conn.fetch(self._sql, *self._args)
            return [self._decode_hook(row) for row in result]

        return _wrapper().__await__()

    async def __anext__(self) -> T:
        if self._cursor is None or self._iterator is None:
            self._cursor = self._conn.cursor(self._sql, *self._args)
            self._iterator = self._cursor.__aiter__()
        try:
            record = await self._iterator.__anext__()
        except StopAsyncIteration:
            self._cursor = None
            self._iterator = None
            raise
        return self._decode_hook(record)


async def nfl_copy_analysis(
    conn: ConnectionLike, *, params: collections.abc.Sequence[NflCopyAnalysisParams]
) -> int:
    records = [
        (param.analysis, param.price, param.game_time, param.game_tag)
        for param in params
    ]
    r = await conn.copy_records_to_table(
        "v2_nfl_daily_bets",
        columns=["analysis", "price", "game_time", "game_tag"],
        records=records,
    )
    return int(n) if (p := r.split()) and (n := p[-1]).isdigit() else 0


def nfl_players_with_team(conn: ConnectionLike) -> QueryResults[NflPlayersWithTeamRow]:
    def _decode_hook(row: asyncpg.Record) -> NflPlayersWithTeamRow:
        return NflPlayersWithTeamRow(
            id=row[0],
            team_id=row[1],
            name=row[2],
            height=row[3],
            position=row[4],
            injury=row[5],
            team_abv=row[6],
        )

    return QueryResults[NflPlayersWithTeamRow](
        conn, NFL_PLAYERS_WITH_TEAM, _decode_hook
    )


def nfl_teams(conn: ConnectionLike) -> QueryResults[models.V3NflTeam]:
    def _decode_hook(row: asyncpg.Record) -> models.V3NflTeam:
        return models.V3NflTeam(
            id=row[0],
            name=row[1],
            team_code=row[2],
            wins=row[3],
            losses=row[4],
            ties=row[5],
            points_for=row[6],
            points_against=row[7],
            total_tackles=row[8],
            fumbles_lost=row[9],
            defensive_touchdowns=row[10],
            fumbles_recovered=row[11],
            solo_tackles=row[12],
            defensive_interceptions=row[13],
            qb_hits=row[14],
            tackles_for_loss=row[15],
            pass_deflections=row[16],
            sacks=row[17],
            fumbles=row[18],
            passing_td_allowed=row[19],
            passing_yards_allowed=row[20],
            rushing_yards_allowed=row[21],
            rushing_td_allowed=row[22],
        )

    return QueryResults[models.V3NflTeam](conn, NFL_TEAMS, _decode_hook)
